
@page "/"
@using System.Text.Json.Serialization
@using System.Linq
@using Microsoft.AspNetCore.Components
@using Microsoft.JSInterop
@implements IDisposable

<PageTitle>Wheel of Luck</PageTitle>

<h1>Wheel of Luck</h1>

<div class="input-group mb-3">
    <input class="form-control" @bind="newStudent" @onkeydown="HandleKeyDown" placeholder="Student name" />
    <button class="btn btn-primary" @onclick="AddStudent">Add</button>
</div>

<div class="d-flex flex-column flex-md-row mt-3 align-items-start">
    <div class="d-flex flex-column align-items-center flex-shrink-0">
        <canvas id="wheelCanvas" width="600" height="600"></canvas>
        <div class="mt-3 d-flex gap-2">
            <button class="btn btn-success" @onclick="Spin">Spin</button>
            <button class="btn btn-secondary" @onclick="SaveCurrentStudents">Save</button>
            <button class="btn btn-info" @onclick="ImportFromFile">Import</button>
        </div>

        @if (!string.IsNullOrEmpty(winner))
        {
            <p class="mt-3"><strong>Winner: @winner</strong></p>
        }

        <div class="mt-4 w-100 d-none d-md-block">
            @SavedSetsSection
        </div>
    </div>

    <div class="ms-md-3 mt-3 mt-md-0 w-100">
        <h5>Added Items</h5>
        @if (students.Count > 0)
        {
            <ul class="list-group">
                @for (int i = 0; i < students.Count; i++)
                {
                    var index = i;
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @students[index]
                        <button type="button" class="btn-close" aria-label="Remove" @onclick="() => RemoveStudent(index)"></button>
                    </li>
                }
            </ul>
            <button class="btn btn-sm btn-outline-danger mt-2" @onclick="ClearAll">Clear All</button>
        }
        else
        {
            <p class="text-muted">No items added yet.</p>
        }

        <div class="mt-4 w-100 d-block d-md-none">
            @SavedSetsSection
        </div>
    </div>
</div>

<div class="modal fade" id="winnerModal" tabindex="-1" aria-labelledby="winnerModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="winnerModalLabel">Winner</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                @winner
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" @onclick="RemoveWinner">Remove</button>
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>

<div class="modal fade" id="saveModal" tabindex="-1" aria-labelledby="saveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="saveModalLabel">Save Current Set</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <input class="form-control" @bind="saveLabel" placeholder="Set name" />
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" @onclick="ConfirmSave">Save</button>
            </div>
        </div>
    </div>
</div>

@code {
    private string? newStudent;
    private List<string> students = new() { "Item 1", "Item 2", "Item 3", "Item 4" };
    private string? winner;
    private string? saveLabel;
    private List<SavedSet> savedSets = new();
    private DotNetObjectReference<Wheel>? objRef;

    private RenderFragment SavedSetsSection => @<div>
        <h5>Saved Sets</h5>
        @if (savedSets.Count > 0)
        {
            <ul class="list-group">
                @foreach (var set in savedSets)
                {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        @set.Label
                        <button class="btn btn-sm btn-primary" @onclick="() => LoadSavedSet(set)">Load</button>
                    </li>
                }
            </ul>
        }
        else
        {
            <p class="text-muted">No sets saved yet.</p>
        }
    </div>;

    [Inject] private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("wheel.draw", students, true);
            await LoadHistory();
        }
    }

    private async Task AddStudent()
    {
        if (!string.IsNullOrWhiteSpace(newStudent))
        {
            students.Add(newStudent.Trim());
            newStudent = string.Empty;
            winner = null;
            await JS.InvokeVoidAsync("wheel.draw", students, true);
            StateHasChanged();
        }
    }

    private async Task RemoveStudent(int index)
    {
        if (index >= 0 && index < students.Count)
        {
            students.RemoveAt(index);
            winner = null;
            await JS.InvokeVoidAsync("wheel.draw", students, true);
            StateHasChanged();
        }
    }

    private async Task ClearAll()
    {
        if (students.Count == 0)
        {
            return;
        }

        students.Clear();
        winner = null;
        await JS.InvokeVoidAsync("wheel.draw", students, true);
        StateHasChanged();
    }

    private async Task Spin()
    {
        if (students.Count == 0)
        {
            return;
        }

        winner = await JS.InvokeAsync<string>("wheel.spin", students);
        StateHasChanged();
        await JS.InvokeVoidAsync("wheel.showWinnerModal");
    }

    private async Task SaveCurrentStudents()
    {
        if (students.Count == 0)
        {
            return;
        }

        saveLabel = string.Empty;
        await JS.InvokeVoidAsync("wheel.showSaveModal");
    }

    private async Task ConfirmSave()
    {
        if (string.IsNullOrWhiteSpace(saveLabel))
        {
            return;
        }

        await JS.InvokeVoidAsync("wheel.saveHistory", students, saveLabel);
        await LoadHistory();
        await JS.InvokeVoidAsync("wheel.hideSaveModal");
        saveLabel = string.Empty;
    }

    private async Task ImportFromFile()
    {
        objRef ??= DotNetObjectReference.Create(this);
        await JS.InvokeVoidAsync("wheel.importFile", objRef);
    }

    [JSInvokable]
    public async Task ReceiveImported(string[] names)
    {
        students = names.ToList();
        winner = null;
        await JS.InvokeVoidAsync("wheel.draw", students, true);
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddStudent();
        }
    }

    private async Task RemoveWinner()
    {
        if (string.IsNullOrEmpty(winner))
        {
            return;
        }

        var index = students.IndexOf(winner);
        if (index >= 0)
        {
            await RemoveStudent(index);
        }

        await JS.InvokeVoidAsync("wheel.hideWinnerModal");
    }

    private async Task LoadHistory()
    {
        var history = await JS.InvokeAsync<SavedSet[]>("wheel.getHistory");
        savedSets = history?.ToList() ?? new();
        StateHasChanged();
    }

    private async Task LoadSavedSet(SavedSet set)
    {
        students = new List<string>(set.Names);
        winner = null;
        await JS.InvokeVoidAsync("wheel.draw", students, true);
        StateHasChanged();
    }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    private class SavedSet
    {
        [JsonPropertyName("label")] public string Label { get; set; } = string.Empty;
        [JsonPropertyName("names")] public List<string> Names { get; set; } = new();
    }
}
