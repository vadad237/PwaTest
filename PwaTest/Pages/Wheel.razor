@page "/wheel"

<PageTitle>Wheel of Luck</PageTitle>

<h1>Wheel of Luck</h1>

<input @bind="newStudent" @onkeydown="HandleKeyDown" placeholder="Student name" />
<button class="btn btn-primary" @onclick="AddStudent">Add</button>

@if (students.Count > 0)
{
    <ul class="list-group mt-3">
        @for (int i = 0; i < students.Count; i++)
        {
            <li class="list-group-item d-flex justify-content-between align-items-center">
                @students[i]
                <button type="button" class="btn-close" aria-label="Remove" @onclick="() => RemoveStudent(i)"></button>
            </li>
        }
    </ul>
}

<div class="mt-3">
    <canvas id="wheelCanvas" width="300" height="300"></canvas>
</div>

<button class="btn btn-success mt-3" @onclick="Spin">Spin</button>

@if (!string.IsNullOrEmpty(winner))
{
    <p class="mt-3"><strong>Winner: @winner</strong></p>
}

@code {
    private string? newStudent;
    private List<string> students = new();
    private string? winner;

    [Inject] private IJSRuntime JS { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("wheel.draw", students);
        }
    }

    private async Task AddStudent()
    {
        if (!string.IsNullOrWhiteSpace(newStudent))
        {
            students.Add(newStudent.Trim());
            newStudent = string.Empty;
            winner = null;
            await JS.InvokeVoidAsync("wheel.draw", students);
            StateHasChanged();
        }
    }

    private async Task RemoveStudent(int index)
    {
        if (index >= 0 && index < students.Count)
        {
            students.RemoveAt(index);
            winner = null;
            await JS.InvokeVoidAsync("wheel.draw", students);
            StateHasChanged();
        }
    }

    private async Task Spin()
    {
        if (students.Count == 0)
        {
            return;
        }

        winner = await JS.InvokeAsync<string>("wheel.spin", students);
        StateHasChanged();
    }

    private async Task HandleKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await AddStudent();
        }
    }
}
